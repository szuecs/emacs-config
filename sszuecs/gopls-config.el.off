(setenv "GOROOT" "/usr/local/go")
(setenv "GOPATH" (concat (getenv "HOME") "/go"))
(setenv "GOBIN" (concat (getenv "GOPATH") "/bin"))
(setenv "PATH" (concat (getenv "PATH")
    ":" (getenv "GOBIN")
    ":" (getenv "GOROOT") "/bin"
    ))
(push (getenv "GOBIN") exec-path)
(push (concat (getenv "GOROOT") "/bin") exec-path)


(use-package lsp-mode
  :ensure t
  ;; does not seem to have an effect
  ;;:init (setq lsp-keymap-prefix "C-c l")
  ;; if which-key integration
  ;;:hook (
  ;;	 (lsp-mode . lsp-enable-which-key-integration))
  :config (progn
	    ;; timeout
	    (setq lsp-response-timeout 3)
	    ;; If non nil keep workspace alive when the last workspace buffer is closed.
	    (setq lsp-keep-workspace-alive t)
	    ;; Enable/disable snippet completion support
	    (setq lsp-enable-snippet t)
	    ;; file watches are slow in emacs, so disable to be able to browse kubernetes code
	    (setq lsp-enable-file-watchers nil)
	    ;; render eldoc in cmd buffer
	    (setq lsp-eldoc-render-all t)
	    ;; xref - https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html
	    ;; (setq lsp-enable-xref nil)
	    ;; lsp-mode will apply edits suggested by gopls
	    (setq lsp-before-save-edits t)
	    ;; disable imenu
	    (setq lsp-enable-imenu nil)
	    ;; indentation support
	    (setq lsp-enable-indentation t)
	    ;; disable lsp-ui - BUG: seems not to work, maybe breaks lsp
	    ;;(setq lsp-auto-configure nil)
	    ;; default is t not?
	    (setq lsp-enable-completion-at-point t)
	    ;; perf log into *lsp-log*
	    ;;(lsp-print-performance t)

	    ;; document link to godoc
	    ;;(setq lsp-gopls-linkTarget "godoc.org")
	    (setq lsp-gopls-linkTarget "pkg.go.dev")
	    ;; disable placeholders in completion snippets - BUG: might not do anything
	    ;;(setq lsp-gopls-use-placeholders nil)
	    (lsp-register-custom-settings
	     '(("gopls.completeUnimported" t t)
	    ;   ("gopls.fuzzyMatching" t t)
	       ("gopls.staticcheck" t t)
	       ))
	    ;; https://github.com/emacs-lsp/lsp-mode#performance
	    (setq gc-cons-threshold 100000000)
	    (setq read-process-output-max (* 4 1024 1024)) ;; 1mb
	    )
  ;; uncomment to enable gopls http debug server
  ;:custom (lsp-gopls-server-args '("-debug" "127.0.0.1:0"))
  :custom (lsp-gopls-server-args '("-logfile" "/tmp/gopls.log"))
  :commands (lsp lsp-deferred)
  )


;; optional - provides fancy overlay information
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode
  :config (progn
            ;; disable inline documentation
            (setq lsp-ui-sideline-enable nil)
            ;; disable showing docs on hover at the top of the window
            (setq lsp-ui-doc-enable nil))
  )

;(global-set-key (kbd "C-t") ')
;; treemacs is a IDE style mode
;; start with M-x treemacs
(use-package lsp-treemacs
  :after lsp-mode
  :commands lsp-treemacs-errors-list
  :bind (:map lsp-mode-map
	      ("C-i" . lsp-treemacs-implementations)
	      ("C-<f8>" . lsp-treemacs-symbols))
    :hook (go-mode . lsp-deferred))
  ;:config (with-eval-after-load 'lsp-treemacs (lsp-treemacs-symbols))
;; lsp-treemacs-references/lsp-treemacs-implementations

;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)


;; optional package to get the error squiggles as you edit
(use-package flycheck
  :ensure t)

;(use-package company
;	:ensure t
;	:config (progn
;		;; don't add any dely before trying to complete thing being typed
;		;; the call/response to gopls is asynchronous so this should have little
;		;; to no affect on edit latency
;		(setq company-idle-delay 0)
;		;; start completing after a single character instead of 3
;		(setq company-minimum-prefix-length 1)
;		;; align fields in completions
;		(setq company-tooltip-align-annotations t)
;	)
;)
;
;;; if you use company-mode for completion (otherwise, complete-at-point works out of the box):
;(use-package company-lsp
;  :ensure t
;  :commands company-lsp)

(use-package go-mode
	:ensure t
	:bind (
		("M-*" . pop-tag-mark)
		;; If you want to switch existing go-mode bindings to use lsp-mode/gopls instead
		;; uncomment the following lines
		;; ("C-c C-j" . lsp-find-definition)
		;; ("C-c C-d" . lsp-describe-thing-at-point)
		)
	:hook ((go-mode . gopls-config/set-library-path)
		(go-mode . lsp-deferred)
		(before-save . lsp-organize-imports)))

(defun gopls-config/set-library-path ()
  "Set lsp library directory for go modules"
  (setq lsp-clients-go-library-directories
        (list
         ;; /usr is the default value
         "/usr"
         ;; add $GOPATH/pkg/mod to the "library path"
         ;; this causes lsp-mode to try each of the active lsp sessions instead
         ;; of prompting for which project to use
         ;; see (lsp--try-open-in-library-workspace)
         (concat (string-trim-right (shell-command-to-string "go env GOPATH")) "/pkg/mod"))))


(provide 'gopls-config)
